on: [push, pull_request]

name: Continuous integration

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build-latest:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable]

    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - uses: actions/checkout@master

    - name: Rust cache
      uses: Swatinem/rust-cache@v1

    - name: Build linux
      if: matrix.os == 'ubuntu-latest'
      run: cargo build --release && mv target/release/wordninja target/release/wordninja-linux

    - name: Upload linux target
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: wordninja-linux
        path: target/release/wordninja-linux

    - name: Build macOS
      if: matrix.os == 'macOS-latest'
      run: cargo build --release && mv target/release/wordninja target/release/wordninja-macos
    - name: Upload macOS target
      if: matrix.os == 'macOS-latest'
      uses: actions/upload-artifact@v2
      with:
        name: wordninja-macos
        path: target/release/wordninja-macos

    - name: Build windows
      if: matrix.os == 'windows-latest'
      run: cargo build --release
    - name: Upload windows target
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: wordninja-windows
        path: target/release/wordninja.exe

  release-latest:
    needs: [check, test, fmt, clippy, build-latest]
    name: release-latest
    runs-on: ubuntu-latest
    steps:
      - name: Download the artifacts to release
        uses: actions/download-artifact@v2
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ startsWith(github.ref, 'refs/heads') && 'latest' || null }}
          prerelease: ${{ startsWith(github.ref, 'refs/heads') }}
          title: ${{ startsWith(github.ref, 'refs/heads') && 'Latest' || null }}
          files: |
            wordninja-linux
            wordninja-macos
            wordninja-windows
